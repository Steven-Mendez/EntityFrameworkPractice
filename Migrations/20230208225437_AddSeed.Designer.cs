// <auto-generated />
using System;
using EntityFrameworkPractice.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFrameworkPractice.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230208225437_AddSeed")]
    partial class AddSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityFrameworkPractice.Domain.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfesorId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfesorId");

                    b.HasIndex("StatusId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Descripcion1",
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4657),
                            Name = "Course1",
                            Objective = "Objective1",
                            ProfesorId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Descripcion2",
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4658),
                            Name = "Course2",
                            Objective = "Objective2",
                            ProfesorId = 2,
                            StatusId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Descripcion3",
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4659),
                            Name = "Course3",
                            Objective = "Objective3",
                            ProfesorId = 3,
                            StatusId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Descripcion4",
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4660),
                            Name = "Course4",
                            Objective = "Objective4",
                            ProfesorId = 4,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Descripcion5",
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4660),
                            Name = "Course5",
                            Objective = "Objective5",
                            ProfesorId = 5,
                            StatusId = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "Descripcion6",
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4661),
                            Name = "Course6",
                            Objective = "Objective6",
                            ProfesorId = 6,
                            StatusId = 3
                        },
                        new
                        {
                            Id = 7,
                            Description = "Descripcion7",
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4662),
                            Name = "Course7",
                            Objective = "Objective7",
                            ProfesorId = 7,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "Descripcion8",
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4662),
                            Name = "Course8",
                            Objective = "Objective8",
                            ProfesorId = 1,
                            StatusId = 2
                        });
                });

            modelBuilder.Entity("EntityFrameworkPractice.Domain.CoursesStudents", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("CoursesStudents");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            CourseId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            CourseId = 1,
                            StudentId = 3
                        },
                        new
                        {
                            CourseId = 1,
                            StudentId = 4
                        },
                        new
                        {
                            CourseId = 1,
                            StudentId = 5
                        },
                        new
                        {
                            CourseId = 2,
                            StudentId = 1
                        },
                        new
                        {
                            CourseId = 2,
                            StudentId = 2
                        },
                        new
                        {
                            CourseId = 2,
                            StudentId = 3
                        },
                        new
                        {
                            CourseId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            CourseId = 2,
                            StudentId = 5
                        },
                        new
                        {
                            CourseId = 3,
                            StudentId = 1
                        },
                        new
                        {
                            CourseId = 3,
                            StudentId = 2
                        },
                        new
                        {
                            CourseId = 3,
                            StudentId = 3
                        });
                });

            modelBuilder.Entity("EntityFrameworkPractice.Domain.Profesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Profesors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4596),
                            FirstName = "Steven1",
                            LastName = "Mendez1",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4597),
                            FirstName = "Steven2",
                            LastName = "Mendez2",
                            StatusId = 2
                        },
                        new
                        {
                            Id = 3,
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4598),
                            FirstName = "Steven3",
                            LastName = "Mendez3",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 4,
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4599),
                            FirstName = "Steven4",
                            LastName = "Mendez4",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4599),
                            FirstName = "Steven5",
                            LastName = "Mendez5",
                            StatusId = 2
                        },
                        new
                        {
                            Id = 6,
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4600),
                            FirstName = "Steven6",
                            LastName = "Mendez6",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 7,
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4600),
                            FirstName = "Steven7",
                            LastName = "Mendez7",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("EntityFrameworkPractice.Domain.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Estatus de registro generico para todas las tablas que usan",
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4532),
                            Name = "Creado"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Estatus de registro generico para todas las tablas que usan",
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4541),
                            Name = "Activo"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Estatus de registro generico para todas las tablas que usan",
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4541),
                            Name = "Inactivo"
                        });
                });

            modelBuilder.Entity("EntityFrameworkPractice.Domain.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaternalSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaternalSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2003, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4612),
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4611),
                            FirstName = "Student1",
                            MaternalSurname = "Student111",
                            PaternalSurname = "Student11",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2003, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4619),
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4619),
                            FirstName = "Student2",
                            MaternalSurname = "Student111",
                            PaternalSurname = "Student11",
                            StatusId = 2
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(2003, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4620),
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4620),
                            FirstName = "Student3",
                            MaternalSurname = "Student111",
                            PaternalSurname = "Student11",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(2003, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4622),
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4621),
                            FirstName = "Student4",
                            MaternalSurname = "Student111",
                            PaternalSurname = "Student11",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(2003, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4647),
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4645),
                            FirstName = "Student5",
                            MaternalSurname = "Student111",
                            PaternalSurname = "Student11",
                            StatusId = 2
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(2003, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4649),
                            DischargeDate = new DateTime(2023, 2, 8, 16, 54, 37, 638, DateTimeKind.Local).AddTicks(4648),
                            FirstName = "Student6",
                            MaternalSurname = "Student111",
                            PaternalSurname = "Student11",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("EntityFrameworkPractice.Domain.Course", b =>
                {
                    b.HasOne("EntityFrameworkPractice.Domain.Profesor", "Profesor")
                        .WithMany("Courses")
                        .HasForeignKey("ProfesorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameworkPractice.Domain.Status", "Status")
                        .WithMany("Courses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Profesor");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("EntityFrameworkPractice.Domain.CoursesStudents", b =>
                {
                    b.HasOne("EntityFrameworkPractice.Domain.Course", "Course")
                        .WithMany("CoursesStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EntityFrameworkPractice.Domain.Student", "Student")
                        .WithMany("CoursesStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EntityFrameworkPractice.Domain.Profesor", b =>
                {
                    b.HasOne("EntityFrameworkPractice.Domain.Status", "Status")
                        .WithMany("Profesors")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("EntityFrameworkPractice.Domain.Student", b =>
                {
                    b.HasOne("EntityFrameworkPractice.Domain.Status", "Status")
                        .WithMany("Students")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("EntityFrameworkPractice.Domain.Course", b =>
                {
                    b.Navigation("CoursesStudents");
                });

            modelBuilder.Entity("EntityFrameworkPractice.Domain.Profesor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("EntityFrameworkPractice.Domain.Status", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Profesors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EntityFrameworkPractice.Domain.Student", b =>
                {
                    b.Navigation("CoursesStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
